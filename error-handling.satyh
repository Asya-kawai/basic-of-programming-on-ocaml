@import: settings

let error-handling = '<
    +p{
      \dfn{エラーハンドリング}は、プログラムが実行される際にその処理が妨げられるような入力や計算結果となった場合、
      これをエラーとして処理することまたはその処理方法を指す言葉です。
      実はこれまで扱ってきた関数でも、if式やmatch式によるエラーハンドリングを行ってきました。
      例えば、リスト操作で空リストが渡された場合、\codem{[] -\> []}と書いていましたが、
      これも一種のエラーハンドリングと考えることができます。
      しかし、\codem{mod}関数のような除算の商を出力する関数において、割る数に0を代入された場合、安易に0を返すことができません。
      なぜなら正しく計算された結果として商が0となったのか、エラーとしての0なのかが区別できないからです。
      OCamlでは\dfn{例外}という機構を用いてこれに対処可能です。
      本章ではエラーハンドリングを行うための「戻り値」「例外」「Result型」を説明します。
    }
    +section?:(`Error aware return types`){戻り値によるエラーハンドリング}<
      +p{
        最も簡単なエラーハンドリングは、関数がエラーである旨を戻り値で示すという方法です。
        これまで見てきた関数定義でも扱った事項ですが、改めて下記の例を見てみましょう。

        \d-code(```
          utop # let rec find data = function
            | [] -> false
            | x :: xs -> if data = x then true else find data xs ;;
          val find : 'a -> 'a list -> bool = <fun>
        ```);%

        上記の例では、関数\codem{find}を定義しており、これは多相型であるdataと多相リストを引数に取ります。
        \codem{[] -\> false}で、空リストの場合つまりdataが見つからなかった場合\codem{false}を返します。
        この部分はこれまで見てきた通りですが、これをオプション型で表現することもできます。

        \d-code(```
          utop # let rec find data = function
            | [] -> None
            | x :: xs -> if data = x then Some x else find data xs ;;
          val find : 'a -> 'a list -> 'a option = <fun>
        ```);%
        戻り値の\codem{None}はdataが見つからなかったことを示し、\codem{Some x}は見つかった値をオプション型で返すことを示しています。
        このようなエラーハンドリングでは、関数の呼び出し元がNoneかそれ以外かによって明示的且つ適切に処理する必要があります。
      }
    >
>