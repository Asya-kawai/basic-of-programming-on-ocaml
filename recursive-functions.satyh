@import: settings

% if式やパターンマッチ、リスト、タプルなどのデータと型を説明した後でないとツライのでここに持ってきた

% https://dev.realworldocaml.org/variables-and-functions.html - Recursive Functions
% プログラミングの基礎 - 第10章 再帰関数を使ったプログラミング

let recursive-functions = '<
  +p{
    序文
  }    
  +section?:(`Recursive functions`){再帰関数}<
    +p{
      \dfn{再帰関数}とは、関数内で自分自身の呼び出しが含まれている関数です。
      自分自身の呼び出しを\dfn{再帰呼び出し}といいます。
      再帰関数を定義するには以下の構文を利用します。

      \d-code(```
        let rec <function> <arguments...> = <expr>
      ```);%

      上記の構文は名前付きの関数とほとんど同じで、
      唯一違う点は\codem{let}キーワードの後に\codem{rec}キーワードが追加されていることです。
      この\codem{rec}キーワードを付与することで、この関数が再帰関数であることを示します。

      再帰関数を利用する場合、単純に自分自身を呼び出してしまうと無限ループに陥ってしまうため、
      後述する\dfn{条件分岐}や\dfn{パターンマッチ}を用いる必要があります。
      そのため、本節では構文の紹介に留め、条件分岐やパターンマッチの節で改めて解説します。
    }
  >
>