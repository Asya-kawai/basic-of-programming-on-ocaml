@import: settings

% プログラミングの基礎 第8章 レコード
% プログラミングの基礎 第17章 再帰的なデータ構造
% https://dev.realworldocaml.org/records.html
% https://dev.realworldocaml.org/variants.html
% https://cs3110.github.io/textbook/chapters/data/records_tuples.html
% https://cs3110.github.io/textbook/chapters/data/variants.html

let records-and-variants = '<   
  +p{
    タプルのように構造を持つデータ型は他にもあります。
    それが\dfn{レコード}と\dfn{バリアント}です。
    本章では、構造内のデータに名前を付け識別する方法や複数のデータを1つの型で表現する手法について説明します。
  }
  +section?:(`Records`){レコード}<
    +p{
      % プログラミングの基礎 第8章 レコード
      タプルでは要素の順序を意識する必要がありました。
      しかし、扱うデータによっては要素の順番を意識する必要がなかったり、
      そもそも要素の順番が一定でないデータもあります。
      またタプルには、各要素の値が何を表しているかを示すような、要素に対する名称をつけることができませんでした。
      \dfn{レコード}を利用することで、要素の順番を気にせず且つ要素に対する名称を与えることができます。

      % https://dev.realworldocaml.org/records.html - Records
      レコードを利用するには、まずレコードの型を定義する必要があります。
      レコードの新しい型を定義するには、以下の構文を利用します。

      \d-code(```
        type <record> = {
          <field> : <type> ;
          ...
        }
      ```);%

      上記の構文において、\codem{\<record\>}は定義する型名を表しています。
      \codem{\<field\>}がレコードの要素名を表し、\codem{\<value\>}がその要素の値を表します。
      % プログラミングの基礎 第8章 8.2レコードの構文
      なお、レコードではこの要素のことを\dfn{フィールド}といいます。
      カッコ（\{...\}）中の3つのドット（\codem{...}）は「後ろに\<field\> : \<type\> \;の形式で0個以上の別名フィールドを書いて良い」ことを示します\footnote{
        \<type\>はintやstringといった型名を取ります。
      }。

      % https://v2.ocaml.org/manual/patterns.html#pattern
      レコードの構造をEBNFで表すと以下のようになります。
      \d-code(```
      <pattern> ::= ...
                  | { <field> [:<typexpr>] [= <pattern>]
                      {; field [:<typexpr>] [= <pattern>]} [; _] [;] }
                  | ...

      <field>   ::= (a..z | _) { a..zA..Z | 0..9 | _ | ' }
      ```);%

      上記の構文は次のルールを示しています。
      \listing{
        * レコードはカッコ（\{...\}）内に\<field\>シンボルを取ります
        * レコードは1つ以上のフィールドを持ちます
        * レコードはセミコロン（\;）で区切ります
        * レコードの末尾のセミコロン（\;）は省略可能です
      }%

      上記から、レコードは以下のような表現が可能であることが分かります。

      \d-code(```
      utop # type profile = {
        last_name: string;
        first_name: string;
        age: int
      } ;;
      type profile = { last_name : string; first_name : string; age : int; }

      utop # { last_name = "KAWAI"; first_name = "Toshiki"; age = 28 } ;;
      - : profile = {last_name = "KAWAI"; first_name = "Toshiki"; age = 28}
      ```);%
    
      上記の例では、\codem{profile}というレコード型を定義し、
      これは string型で表現される\codem{last_name}及び\codem{first_name}フィールドと、
      int型で表現される\codem{age}フィールドから構成されます。

      なお、フィールド名はその型定義の中で一意でなければなりません。
      つまり重複するようなフィールド名を持つことはできません。
      以下に、重複したフィールド名を定義しようとした際の例を示します。

      \d-code(```
        utop # type profile = {
          name : string ;
          name : string ;
        } ;;
        Line 3, characters 2-6:
        Error: Two labels are named name
      ```);%

      上記の例では、インタプリタの出力は「\codem{name}という名称が2つ存在する」旨のエラーが示されています。
    }
    % ここにもっと書く
    % https://dev.realworldocaml.org/records.html を参考に。
  >
  +section?:(`Original types`){独自の型定義}<
    +p{
      レコード型に限らず、独自の型を定義する場合には\codem{type}キーワードを利用します。
      独自の型を定義するには以下の構文を用います。

      \d-code(```
        type <type> = <def>
      ```);%

      % プログラミングの基礎 第8章 8.3 ユーザによる型定義
      \codem{\<type\>}は型名を表し、型名に対する\codem{\<def\>}は型定義を表します。

      % https://v2.ocaml.org/manual/types.html#typexpr
      % Type definitions bind type constructors to data types: 
      % https://cs3110.github.io/textbook/chapters/data/options.html
      % Like list, we call option a type constructor: given a type, it produces a new type; but, it is not itself a type.
      別の言い方をすれば、
      型定義とは型コンストラクタ（\<type\>）をデータ型（\<def\>）に束縛することを意味します\footnote{
        型を指定すると新しい型を返すものを型コンストラクタと言います。
      }。

      EBNFで表すと以下のようになります\footnote{
        分かりやすさのため、一部の記号列を省略しています。
      }。

      % https://v2.ocaml.org/manual/typedecl.html#ss:typedefs
      \d-code(```
      <type-definition>  ::= type <typedef> { and <typedef> }
      <typedef>          ::= ... <typeconstr-name> <type-information>
      <type-information> ::= [<type-equation>] ...
      <type-equation>    ::= = <typexpr>

      <typeconstr-name>  ::= (a..z | _) { a..zA..Z | 0..9 | _ | ' }
      ```);%

      上記の構文は次のルールを表しています。
      \listing{
        * 型定義（\<type-definition\>）はtype \<typedef\>という構文で表現されます\footnote{
            \<type-definition\>は、独自の型定義の構文\codem{type \<type\> = \<def\>}に該当します。
          }
        * \<typedef\>は\codem{型コンストラクタ名（\<typeconstr-name\>） = 型式（\<typexpr\>）}で表現できます\footnote{
            \<typedef\>から「\<typeconstr-name\> \<type-information\>」ですが、\<type-information\>は\<type-equation\>であり、これは「= \<typexpr\>」と解釈されるため、このように表現できます。
            型定義はこれ以外の表現も可能です。分かりやすさのため、他の表現方法は省略しています。
          }
        * 型コンストラクタ名（\<typeconstr-name\>）は、先頭小文字またはアンダースコア（_）で始まり、以降は小文字、大文字、0〜9の数字、アンダースコア（_）またはシングルクォート（'）が利用できます
      }%

      上記の構文から、次のように独自の型を定義可能です。

      \d-code(```
      utop # type my_int = int ;;
      type my_int = int

      utop # type my_string = string ;;
      type my_string = string

      utop # (1 : my_int) ;;
      - : my_int = 1

      utop # ("one" : my_string) ;;
      - : my_string = "one"
      ```);%

      % https://cs3110.github.io/textbook/chapters/data/type_synonym.html
      上記以外にも、複数の型を組み合わせて独自の型を定義できます。

      \d-code(```
      utop # type point = float * float ;;
      type point = float * float

      utop # type vector = float list ;;
      type vector = float list

      utop # type matrix = float list list ;;
      type matrix = float list list

      utop # (10., 20. : point) ;;
      - : point = (10., 20.)

      utop # ([1. ; 2.] : vector) ;;
      - : vector = [1.; 2.]

      utop # ([[1. ; 2.]; [3. ; 4.]] : matrix) ;;
      - : matrix = [[1.; 2.]; [3.; 4.]]
      ```);%

      このように、既存の型に対して新しい型名を付けることを\dfn{型シノニム}と言います。
      複雑なデータ型に分かりやすい名前を付けることでコードの可読性が向上します。
    }
  >
  +section?:(`Variants`){バリアント}<
    +p{
      レコードは全てのフィールドが揃っている必要がありました。
      つまり、たった1つでもフィールドの記述が漏れているとエラーとなってしまうのでした。
      現実のプログラミングでは、いつも全てのフィールドが揃っているとは限りません。
      そこで、複数のデータを1つのデータとして扱えると便利です。

      \dfn{バリアント}は複数のデータを1つの型として扱うためのデータです。
      この時のデータの型を\dfn{バリアント型}といいます。

      OCamlにおけるバリアントの型を定義するための構文は以下の通りです。

      % https://dev.realworldocaml.org/variants.html
      \d-code(```
        type <variant> =
          | <Tag> [ of <type> [* <type>]... ]
          | ...
      ```);%

      上記の構文は、コンストラクタを表す\codem{\<Tag\>}が、「または」を表すパイプ（\codem{\|}）でつながっています\footnote{
        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#variants-that-carry-data
        バリアント型において、コンストラクタは\dfn{タグ}とも呼ばれます。
      }。
      つまり\codem{\<variant\>}はパイプ（\|）でつながったコンストラクタのいずれかを値として取ります。
      \<Tag\>の先頭が大文字から始まっているのは、コンストラクタの先頭が大文字から始まる必要があることを表しています。
      \codem{[...]}は0回以上の出現を表しており、「\<Tag\> of \<type\>」や「\<Tag\> of \<type_1\> \* ... \* \<type_n\>」のように定義できます。
      バリアント型の定義をEBNFで表すと以下のようになります\footnote{
        分かりやすさのため、バリアント型の定義に関する表現のみ記載しています。
      }。

      % https://v2.ocaml.org/manual/typedecl.html#ss:typedefs
      % https://v2.ocaml.org/manual/names.html#constr-name
      % https://v2.ocaml.org/manual/lex.html#capitalized-ident
      \d-code(```
      <type-definition>     ::= type <typedef> { and <typedef> }
      <typedef>             ::= ... <typeconstr-name> <type-information>
      <type-information>    ::= ... [<type-representation>]
      <type-representation> ::= = [|] <contr-decl> { | <constr-decl> }
                              | ...

      <typeconstr-name>     ::= (a..z | _) { a..zA..Z | 0..9 | _ | ' }
      <constr-decl>         ::= ( <constr-name> | [] | (::) ) [of <constr-args>]
      <constr-args>         ::= <typexpr> [ * <typexpr> ]
      <constr-name>         ::= (A..Z) { a..zA..Z | 0..9 | _ | ' }
      ```);%

      上記の構文は次のルールを表しています。
      \listing{
        * バリアント型の定義は、type \<typedef\>という構文で表現されます\footnote{
          これは\ref-section(`Original types`);の「独自の型定義」と同じです。
        }
        * バリアント型の定義は「型コンストラクタ名（\<typeconstr-name\>） = \| \<constr-decl_1\> ... \| \<constr-decl_n\>」のように複数のデータコンストラクタ宣言（\<constr-decl\>）を持つことができます
        * 型コンストラクタ名（\<typeconstr-name\>）は、先頭小文字またはアンダースコア（_）で始まり、以降は小文字、大文字、0〜9の数字、アンダースコア（_）またはシングルクォート（'）が利用できます\footnote{
          これも\ref-section(`Original types`);の「独自の型定義」と同じです。
        }
        * データコンストラクタ宣言（\<constr-decl\>）は、単一のコンストラクタ名（\<constr-name\>）を取ることができます
        * また\codem{コンストラクタ名（\<constr-name\>） of \<typexpr\> [ \* \<typexpr\> ]}のように、\codem{of}キーワードを用いてコンストラクタ名に引数を与え型情報を付与できます
        * コンストラクタ名（\<constr-name\>）は、先頭大文字で始まり、以降は小文字、大文字、0〜9の数字、アンダースコア（_）またはシングルクォート（'）が利用できます
      }%

      バリアント型の例を以下に示します。

      % https://dev.realworldocaml.org/variants.html
      \d-code(```
        utop # type color =
          | Black
          | Blue
          | Green
          | Red
          | White ;;
        type color = Black | Blue | Green | Red | White
      ```);%

      上記は、バリアント型であるcolorを定義しています。
      colorはデータコンストラクタとして、Black、Blue、Green、Red、Whiteを持ちます。
      例えば、パターンマッチを用いてデータコンストラクタを整数や文字列に変換するといった処理が可能です。

      \d-code(```
      utop # let convert_to_int = function
        | Black -> 0
        | Blue -> 1
        | Green -> 2
        | Red -> 3
        | White -> 4 ;;
      val convert_to_int : color -> int = <fun>

      utop # convert_to_int Black ;;
      - : int = 0
      utop # convert_to_int White ;;
      - : int = 4
      ```);%

      また、\<Tag\> of \<type\> \| ...のように型情報を付与することも可能です。

      \d-code(```
      utop # type color =
        | Black of int
        | RGB of int * int * int
        | White of int ;;
      type color = Black of int | RGB of int * int * int | White of int

      utop # Black 1 ;;
      - : color = Black 
      utop # RGB (1, 2, 3) ;;
      - : color = RGB (1, 2, 3)
      ```);%
    }
    +p{
      % http://www.cs.tsukuba.ac.jp/~kam/lecture/fp2017/6.pdf 3 代数的データ型
      % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#variants-that-carry-data
      バリアント型は稀にいくつかの名称で呼ばれます。
      例えば、バリアント型は\dfn{タグ付きユニオン（Tagged unions）}とも呼ばれます。
      型が取りうるすべて全ての値が、コンストラクタが取る値の和集合であるためです。
      例えば、color型が取りうる値をタグ付きユニオンの文脈で説明すると以下のようになります。
      \listing{
        * Blackでタグ付けされたint型の値または
        * RGBでタグ付けされたint \* int \* intという値または
        * Whiteでタグ付けされたint型の値
      }%

      また、バリアント型は\dfn{代数的データ型}とも呼ばれます。
      つまりバリアント型は、または（\|）で区切られたコンストラクタのいずれか1つによって形成される\dfn{直和型}と、
      コンストラクタが引数にタプルやレコード型を取れる\dfn{直積型}の両方を持つことを意味します。
    }
    +frame<
      +subsection{コラム；複数の引数を持つ=タプルではない}<
        +p{
          % https://dev.realworldocaml.org/variants.html - VARIANTS, TUPLES AND PARENS
          バリアントは複数の引数を持つコンストラクタを定義できますが、これはタプルではありません。
          以下のように、複数の引数を取るコンストラクタ\codem{Untupled_RGB}を持つ型untupled_rgbと、
          タプルを引数に取るコンストラクタ\codem{Tupled_RGB}を持つ型tupled_rgbを定義します。
          2つの出力は非常に似ており、複数の引数を取るコンストラクタに対してタプルを与えることができるように見えます。
          \d-code(```
          utop # type untupled_rgb = Untupled_RGB of int * int * int ;;
          type untupled_rgb = Untupled_RGB of int * int * int

          utop # type tupled_rgb = Tupled_RGB of (int * int * int) ;;
          type tupled_rgb = Tupled_RGB of (int * int * int)

          utop # Tupled_RGB (1, 2, 3) ;;
          - : tupled_rgb = Tupled_RGB (1, 2, 3)

          utop # Untupled_RGB (1, 2, 3) ;;
          - : untupled_rgb = Untupled_RGB (1, 2, 3)
          ```);%

          しかし、3つの引数を取るコンストラクタUntapled_RGBに対して、以下のようにタプル型の値を持つ変数を与えることはできません。
          \d-code(```
          utop # let tpl = (1, 2, 3) ;;
          val tpl : int * int * int = (1, 2, 3)

          utop # Untupled_RGB tpl ;;
          Error: The constructor Untupled_RGB expects 3 argument(s),
                 but is applied here to 1 argument(s)
          ```);%

          インタプリタの出力は「コンストラクタ\codem{Untupled_RGB}は3つの引数を期待したが、1つしか与えられなかった」ことを示しています。
          一方、Tupled_RGBにはタプル型の値を持つ変数を与えることができます。

          \d-code(```
          utop # Tupled_RGB tpl ;;
          - : tupled_rgb = Tupled_RGB (1, 2, 3)
          ```);%

          なお、タプル型の値を引数に取る関数を介することで、Untupled_RGBに与えることは可能です。
          \d-code(```
          utop # let of_tuple (x, y, z) = Untupled_RGB (x, y, z) ;;
          val of_tuple : int * int * int -> untupled_rgb = <fun>

          utop # of_tuple tpl ;;
          - : untupled_rgb = Untupled_RGB (1, 2, 3)
          ```);%
        }
      >
    >
    +subsection?:(`Variants and pattern matching`){バリアントとパターンマッチ}<
      +p{
        レコードやリストではパターンマッチ（match...with...）を利用して、その要素を取り出しました。
        バリアントでも同様にmatch式を利用して、その値にアクセスできます。

        % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-07w/mltext/ocaml007.html 6.2 ヴァリアント型
        以下ではパターンマッチを利用して、引数として与えられたバリアント型の変数figのコンストラクタに応じて、その面積を返す関数\codem{calc_area}を定義しています。

        \d-code(```
          utop # type figure =
            | Circle of int
            | Rectangle of int * int
            | Square of int ;;
          type figure = Circle of int | Rectangle of int * int | Square of int

          utop # let calc_area fig = match fig with
            | Circle x -> x * x * 3
            | Rectangle (x, y) -> x * y
            | Square x -> x * x
          val calc_area : figure -> int = <fun>

          utop # let circle = Circle 3 ;;
          val circle : figure = Circle 3
          utop # calc_area circle ;;
          - : int = 27

          utop # let rect = Rectangle (3, 4) ;;
          val rect : figure = Rectangle (3, 4)
          utop # calc_area rect ;;
          - : int = 12

          utop # let square = Square 5 ;;
          val square : figure = Square 5
          utop # calc_area square ;;
          - : int = 25 
        ```);%

        上記の例のfigure型はバリアント型であり、Circle、Rectangle、Squareの3つのコンストラクタを持ちます。
        calc_areaはfigure型の値を引数に取り、パターンマッチによってコンストラクタCircle、Rectangle、Squareを判別し、
        コンストラクタの引数に対応するパターン変数を用いて面積を計算します\footnote{
          円の面積を求める計算が\codem{x \* x \* 3}となっていますが、整数値の計算のため3を採用しています。
          Circleがfloat型を引数に取る場合、3.14を用いることができます。
        }。
      }
    >
    +subsection{列挙型との類似性}<
      +p{
        % https://cs3110.github.io/textbook/chapters/data/variants.html
        % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-07w/mltext/ocaml007.html 6.3 ヴァリアント型の応用
        いくつかのプログラミング言語では、定数または識別子（\dfn{列挙子}）を持つ集合からなるデータ型を\dfn{列挙型}といいます。
        例えばプログラミング言語Goの場合、以下のように定数を並べて列挙型のような振る舞いを表現します。

        \d-code(```
          type Color int
          const (
            Black Color = iota
            Blue
            Green
            Red
            Whilte
          )
        ```);%

        OCamlでもバリアントを利用することで同様の定義が可能です。

        \d-code(```
          utop # type color =
            | Black
            | Blue
            | Green
            | Red
            | White ;;
          type color = Black | Blue | Green | Red | White
        ```);%

        しかし、上記のようにプログラミング言語Goでは定数の実体は整数であるため、定数の演算が可能です。
        つまり、Goでは\codem{Blue + Green + Red}のような演算が可能です。

        しかし、OCamlではコンストラクタ同士の演算は定義されていません。
        コンストラクタ同士の演算を行いたい場合、独自の演算子（関数）を定義する必要があります。
        以下にコンストラクタ同士を足し合わせる演算子を定義する例を示します。

        \d-code(```
          utop # type color =
            | Black
            | LightBlue
            | Blue
            | DarkBlue
            | LightGreen
            | Green
            | DarkGreen
            | LightRed
            | Red
            | DarkRed
            | Gray
            | White
            | Unknown ;;
          type color =
              Black
            | LightBlue
            | Blue
            | DarkBlue
            | LightGreen
            | Green
            | DarkGreen
            | LightRed
            | Red
            | DarkRed
            | Gray
            | White
            | Unknown

          utop # let (++) c1 c2 = match (c1, c2) with
            | (Black, Blue) -> DarkBlue
            | (Black, Green) -> DarkGreen
            | (Black, Red) -> DarkRed
            | (Black, White) -> Gray
            | (Black, _) | (_, Black) -> Black
            | (White, Blue) -> LightBlue
            | (White, Green) -> LightGreen
            | (White, Red) -> LightRed
            | (White, _) | (_, White) -> White
            | (_, _) -> Unknown ;;
          val ( ++ ) : color -> color -> color = <fun>

          utop # Black ++ Green ;;
          - : color = DarkGreen
        ```);%

        上記の例は、バリアント型であるcolor型を拡張し、黒または白を混ぜた時の色を追加しました。
        パターンマッチを用いて、色を混ぜ合わせた結果を返す演算子\codem{++}を定義しています。
        混ぜ合わせた結果が黒や白になる組み合わせは、
        \codem{(Black, _) \| (_, Black) -\> ...}、\codem{(White, _) \| (_, White) -\> ...}のように、Orパターンを用いて表現しています。
        このようにバリアント型を用いてコンストラクタ用の演算子を定義することで、
        他のプログラミング言語における列挙型と似たような振る舞いを実現できます。
      }
    >
    +subsection?:(`Recursive variant types`){再帰バリアント型と木構造}<
      +p{
        % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-07w/mltext/ocaml007.html 再帰ヴァリアント型
        バリアント型において、ofの後ろにバリアント型自身を書くことで再帰的にバリアント型を定義できます。
        これを\dfn{再帰バリアント型}と言います。

        % プログラミングの基礎 第17章 17.2 木
        例として「木」の構造（木構造）を考えてみます。
        木は以下の要素から構成されるものとします。

        \listing{
          * 空の木： Empty
          * 葉： Leaf
          * 節（ノード）： Node
        }%

        空の木\codem{Empty}とはその名のとおり葉や節を持たない木を表します。
        葉\codem{Leaf}は木の先端を表し、何か1つのデータを持ちます。
        本節では、葉は整数値を持つことにします。
        一方で節\codem{Node}は木の幹が分かれている部分を表します。
        節自身も何か1つのデータを持ち、さらにその先に2つの木（空の木、葉、または節のいずれか）を持つことができます。
        % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-07w/mltext/ocaml007.html Case Study: 二分木
        節の先を子と言い、子の数が必ず2つ以下となるような木構造を\dfn{2分木}と言います\footnote{
          木構造のうち、子の数が3つ以下のものを3分木、4つ以下のものを4分木と言い、n個以下のものを\dfn{n分木}と言います。
        }。

        以下に2分木を例を図示します。

        \d-code(```
          +-----------+
          | Node (10) |
          +-----------+
             |
             |  +----------+
             +--| Node (5) |
             |  +----------+
             |     |
             |     |     +----------+
             |     +-----| Leaf (4) |
             |     |     +----------+
             |     |
             |     |     +----------+
             |     +-----| Leaf (3) |
             |           +----------+
             |
             |  +----------+
             +--| Leaf (7) |
                +----------+
        ```);%

        これをバリアント型で定義すると以下のように記述できます。
        \d-code(```
          utop # type tree =
            | Empty
            | Leaf of int
            | Node of tree * int * tree ;;
          type tree = Empty | Leaf of int | Node of tree * int * tree
        ```);%

        上記の例は、バリアント型である\codem{tree}を定義しています。
        前述したとおり、木構造はEmpty、Leaf、Nodeの3つのコンストラクタから構成されます。
        Nodeコンストラクタのof以降に自分自身であるtreeを持っているため、これは再帰バリアント型となります。

        % プログラミングの基礎 第17章 17.2 木
        また、自分自身を含むコンストラクタを持つバリアント型は\dfn{自己参照している}といいます。
        自己参照するようなケースでは、無限ループとならないように必ず自己参照しないケースを含める必要があります。
        バリアント型であるtreeでは、EmtpyとLeafが自己参照しないケースに当たります。

        以下にtree型を用いた木構造の例を示します。

        \d-code(```
          utop # type tree =
            | Empty
            | Leaf of int
            | Node of tree * int * tree ;;
          type tree = Empty | Leaf of int | Node of tree * int * tree

          utop # Empty ;;
          - : tree = Empty

          utop # Leaf 3 ;;
          - : tree = Leaf 3

          utop # Leaf 4 ;;
          - : tree = Leaf 4

          utop # Node (Leaf 3, 5, Leaf 4) ;;
          - : tree = Node (Leaf 3, 5, Leaf 4)
        ```);%

        Emptyは空の木を表します。
        Leaf 3は前述のLeaf(3)に当たり、3という整数値を持つ葉を表しています。
        同様にLeaf 4はLeaf(4)を表します。

        また、Nodeは\codem{tree \* int \* tree}の引数を取るため、\codem{Node (Leaf 3, 5, Leaf 4)}は次のことを示します。
        \listing{
          * 左の子にLeaf 3（整数値3を持つ葉）を持ちます
          * 自身は整数値5を持ちます
          * 右の子にはLeaf 4（整数値4を持つ葉）を持ちます
        }%

        なお、Nodeはtree型の引数であれば何でも取ることができるため、以下のようにNodeが別のNodeを持つことも可能です。

        \d-code(```
          utop # Node (Node (Leaf 3, 5, Leaf 4), 10, Leaf 7) ;;
          - : tree = Node (Node (Leaf 3, 5, Leaf 4), 10, Leaf 7)
        ```);%

        これは前述の図示した木構造を表現したものです。
        頂点に10を持ち、そこから7の値を持つ葉と5の値を持つ節が伸びていることを表現しています\footnote{
          % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-07w/mltext/ocaml007.html Case Study: 二分木
          この頂点を\dfn{根（ルート）}と言います。
        }。
        5の値を持つ節は、3と4の葉を持つことが分かります。
        このように節が左または右に別の木構造（具体的には節、葉、空（Empty））を持つ場合、この別の木構造を\dfn{部分木}といいます。
      }
    >
    +subsection?:(`Parameterized variants`){パラメータ化されたバリアント}<
      +p{
        % プログラミングの基礎 第17章 17.5 多相型の宣言
        % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-07w/mltext/ocaml007.html - 多相的ヴァリアント型
        前述のtreeはint型しか持つことができせんが、
        以下のように木及び各コンストラクタが多相型な値を持てるよう定義することも可能です。

        \d-code(```
          utop # type 'a tree = 
            | Empty
            | Leaf of 'a
            | Node of 'a tree * 'a * 'a tree ;;
          type 'a tree = Empty | Leaf of 'a | Node of 'a tree * 'a * 'a tree
        ```);%

        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#parameterized-variants
        上記は、'aが型変数を表しており、'a treeという多相型を定義しています。

        %         % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-07w/mltext/ocaml007.html Case Study: 二分木
        % https://cs3110.github.io/textbook/chapters/data/trees.html#representation-with-tuples
        ここで、木の大きさ（ノード数）を数える関数を考えます。
        \d-code(```
        utop # let rec size = function
          | Empty | Leaf _ -> 0
          | Node (left, _, right) -> 1 + (size left) + (size right) ;;
        val size : 'a tree -> int = <fun>
        ```);%

        上記の関数\codem{size}は、'aがどのような型であっても動作します。

        \d-code(```
        utop # size Empty ;;
        - : int = 0

        utop # size (Leaf 1) ;;
        - : int = 0
        utop # size (Node (Node (Leaf 3, 5, Leaf 4), 10, Leaf 7)) ;;
        - : int = 2

        utop # size (Leaf "a") ;;
        - : int = 0
        utop # size (Node (Node (Leaf "a", "c", Leaf "b"), "e", Leaf "d")) ;;
        - : int = 2
        ```);%

        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#parameterized-variants
        % https://www.fos.kuis.kyoto-u.ac.jp/~igarashi/class/isle4-02w/mltext/ocaml005.html 4.2多相性
        これはOCamlが、パラメトリック多相という「関数等を定義する際に特定のデータ型に依存せず、どのような型であっても関数等の振る舞いが同じ」である性質をサポートするからです。
      }
      +p{
        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#built-in-variants
        また、OCamlのリストやオプションもパラメータ化されたバリアントで表現されています。
        OCamlで予め定義されているリストやオプションの型を確認するにはutopで\codem{\#typeof}を利用します。
        \d-code(```
        utop # #typeof "list" ;;
        type nonrec 'a list = [] | (::) of 'a * 'a list

        utop # #typeof "option" ;;
        type nonrec 'a option = None | Some of 'a
        ```);%

        また、これらは自身で以下のように定義できます。

        \d-code(```
        utop # type 'a my_list =
          | []
          | ( :: ) of 'a * 'a my_list ;;
        type 'a my_list = [] | (::) of 'a * 'a my_list

        utop # [] ;;
        - : 'a my_list = []
        utop # 1 :: [] ;;
        - : int my_list = (::) (1, [])

        utop # type 'a my_option =
          | None
          | Some of 'a ;;
        type 'a my_option = None | Some of 'a

        utop # None ;;
        - : 'a my_option = None
        utop # Some "abc" ;;
        - : string my_option = Some "abc"
        ```);%
      }
    >
    +subsection?:(`Polymorphic variants`){多相バリアント}<
      +p{
        % https://dev.realworldocaml.org/variants.html Polymorphic Variants
        % https://v2.ocaml.org/manual/polyvariant.html
        % https://ocaml.jp/refman/ch04s02.html
        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#polymorphic-variants
        これまで紹介したバリアントは、予めバリアント型を定義する必要がありました。
        これはコンストラクタ（タグ）を定義及び利用する際に、一意の型を割り当てるためです。
        % ref-subsection(`Variants and pattern matching`);を再掲？しない。
        しかし、一部の関数等からのみ利用されるバリアント型のために型定義を書くことは手間です。

        % https://v2.ocaml.org/manual/polyvariant.html
        OCamlは\dfn{多相バリアント}という、事前に型またはコンストラクタの定義が不要で且つ
        コンストラクタ（タグ）が特定の型に属さない（多相バリアントを利用する際に型システムが推論する）データをサポートします。
        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#polymorphic-variants
        なお、多相バリアントのコンストラクタはバッククオート（\codem{\`}） で始まる必要があります。

        % https://v2.ocaml.org/manual/polyvariant.html
        以下に多相バリアントの例を示します。
        \d-code(```
        utop # [`Yes; `No] ;;
        - : [> `No | `Yes ] list = [`Yes; `No]
        ```);%
        上記の例において、
        インタプリタの出力は「直前（-）に入力した結果の型は\codem{``[> `No | `Yes ] list``}という多相バリアント型で、その値は\codem{``[`Yes; `No]``}である」ことを示しています。
        ``[> `No | `Yes ] list``は、引数なしで`` `No``または`` `Yes``のどちらにマッチするリストであることを表します。
        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#polymorphic-variants
        なお、上記の例から分かるとおり、多相バリアントは特定の名前と対応しないため、\dfn{匿名バリアント（無名バリアント）}と言われる場合もあります。

        また、引数を取るコンストラクタを持つ多相バリアントを定義することもできます。
        \d-code(```
        utop # `No 1 ;;
        - : [> `No of int ] = `No 1
        ```);%

        ここで、多相バリアントを処理する関数の例を以下に示します。
        \d-code(```
        utop # let is_zero_or_ten = function
          | 0 | 10 -> `Yes
          | n -> `No n ;;
        val is_zero_or_ten : int -> [> `No of int | `Yes ] = <fun>

        utop # is_zero_or_ten 0 ;;
        - : [> `No of int | `Yes ] = `Yes
        utop # is_zero_or_ten 10 ;;
        - : [> `No of int | `Yes ] = `Yes
        utop # is_zero_or_ten 100 ;;
        - : [> `No of int | `Yes ] = `No 100
        ```);%

        % https://dev.realworldocaml.org/variants.html Polymorphic Variants
        多相バリアント型の先頭にある大なり（\codem{\>}）記号は、`` `Yes``、`` `No``以外のコンストラクタ（タグ）を含む可能性があることを示しています。
        % https://dev.realworldocaml.org/variants.html Polymorphic Variants
        % https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html#polymorphic-variants
        つまり、上記の関数is_zero_or_tenは「少なくとも`` `Yes``、`` `No``またはそれ以上のコンストラクタを返す（可能性がある）」ことを表しています。
        そのため、次のような処理を書くことが可能です。
        \d-code(```
        utop # match is_zero_or_ten 100 with
          | `Yes -> "Yes"
          | `No n -> "No"
          | `Unknown -> "Unknown" ;;
        - : string = "No"
        ```);%
        上記のように、関数is_zero_or_tenが「少なくとも`` `Yes``、`` `No``またはそれ以上のコンストラクタを返す（可能性がある）」ため、任意のコンストラクタUnknownを含めても問題ありません。

        % https://dev.realworldocaml.org/variants.html Polymorphic Variants
        なお、以下のような関数を定義すると、大なり（\>）記号とは逆の意味を持つ小なり（\<）記号を含む多相バリアント型を推論します。
        \d-code(```
        utop # let is_yes = function
          | `Yes -> true
          | `No -> false ;;
        val is_yes : [< `No | `Yes ] -> bool = <fun>
        ```);%
        先頭の小なり（\codem{\<}）記号は、`` `Yes`、`` `No`またはその両方を持つ型のみ引数として受け取れることを示します。
        つまり、上記の関数is_yesは「`` `Yes``、`` `No``またはその両方以下のコンストラクタを受け取り、bool型の値を返す」関数であることが分かります。
      }
    >
  >
>