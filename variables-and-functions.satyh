@import: settings

let variables-and-functions = '<
    +p{
      本章では、プログラミングの基本的な考え方である変数と関数を説明します。

      変数及び関数の定義方法からその利用方法について見ていきます。
    }
    +section?:(`Variables`){変数}<
      +p{
        \dfn{変数}とは、ある値をバインド（束縛）するための識別子です。
        変数をバインドするには以下の構文を利用します。

        \d-code(```
          let <variable> = <expr>
        ```);%

        \codem{\<variable\>}は変数名を表し、\codem{\<expr\>}は式を表します。
        これは具体的には以下のような入力になります。

        \d-code(```
          utop # let a = 123 ;;
          val a : int = 123
        ```);%

        上記の例では、インタプリタが\codem{a}という名前の変数を新たに定義し、その値を\codem{123}という整数にバインドします。
        インタプリタの出力結果は
        「\codem{a}というint型の変数を定義し、その値（\codem{val}）は\codem{123}である」ことを示しています。

        なお、OCamlの変数名は小文字またはアンダースコア（\codem{_}）で始まる必要があることに注意して下さい。
        2文字目以降は、大文字、小文字、数字、アンダースコア（\codem{_}）などを自由に利用できます。
      }
      +frame<
        +subsection{コラム； 変数を使う理由}<
          +p{
            変数がない場合を考えてみましょう。
            一度計算した値やその計算に利用した値を再度利用したいとなった場合、
            式全体を書き換えて再びインタプリタに入力する必要があります。

            そこで再度利用しそうな計算結果や値を変数にバインドしておくことで何度も利用することができるのです。
          }
        >
      >
      +subsection{スコープと局所変数}<+p{
        全ての変数割り当て（\dfn{変数バインディング}と呼ぶ）には、\dfn{スコープ}が存在します。
        スコープとは、その変数バインディングを参照できるコードの範囲です。
        utopインタプリタにて、トップレベル（単に\codem{let a = 123 \;\;}のように入力した場合など）
        で定義した変数のスコープは、そのutop全体（つまりutop内であればどこでも参照可能）です。

        一方で、インタプリタ全体ではなく式や計算過程で一時的な変数を利用したい場合が有ります。
        このようにあるスコープの中で一時的に利用する変数を\dfn{局所変数}といい、以下の構文を用いて定義できます。

        \d-code(```
          let <variable> = <expr1> in <expr2>
        ```);%

        \ref-section(`Variables`);で示した変数の定義方法と似ていますが、ここでは式1（\codem{\<expr1\>}）の後ろに\codem{in}があり、最後に式2（\codem{\<expr2\>}）があります。
        これは、\codem{\<expr1\>}のスコープは\codem{\<expr2\>}に限定される（つまり式2の中でのみ参照可能である）ことを示します。

        具体的な例を以下に示します。

        \d-code(```
          utop # let x = 3 in x + x ;;
          - : int = 6
        ```);%

        上記の例では、式2（\codem{x + x}）の中に出現する変数\codem{x}は、式1（\codem{3}）であることを示しており、
        もう少しわかりやすく表現すると「一時的に変数\codem{x}を式1（\codem{3}）として定義し、式2（\codem{x + x}）を実行する」
        ことを示しています。

        そのため、\codem{x}という局所変数を\codem{3}で定義し、\codem{in}に続く\codem{x + x}は\codem{3 + 3}と評価され、
        結果として\codem{6}が出力されています。

        なお、局所変数\codem{x}のスコープが\codem{x + x}に限定されていることを確かめるには、
        インタプリタのトップレベル（スコープ外）で\codem{x}を参照することで確認できます。

        \d-code(```
          utop # x ;;
          Line 1, characters 0-1:
          Error: Unbound value x
        ```);%

        上記のエラー内容は「\codem{x}という値はバインドされていない」ことを示しています。
        つまり、トップレベルのスコープにはなく、\codem{x + x}のスコープでのみ変数名\codem{x}が参照可能であることが確認できました。
      }>
      +subsection{不変}<+p{
        OCamlの変数は他のプログラミング言語と異なり\dfn{不変}です。
        つまり、変数を定義した後に別の値で上書きできないのです。

        これを確かめるために、局所変数で利用した構文を応用し以下のようにしてみます。

        \d-code(```
          let <variable0> = let <variable1> = <expr1> in <expr2>
        ```);%

        改行を入れても同じ意味になります。

        \d-code(```
          let <variable0> =
            let <variable1> = <expr1> in
            <expr2>
        ```);%


        これは、式1（\codem{\<expr1\>}）は変数1（\codem{\<variable1\>}）に束縛され、
        スコープは式（2\codem{\<expr2\>}）に限定されており、
        式2（\codem{\<expr2\>}）の結果が変数0（\codem{\<variable0\>}）に束縛されることを示しています。
        もう少し直感的に表現すると「変数0（\codem{\<variable0\>}）は内部で局所変数1（\codem{\<variable1\>}）を持ち、式2（\codem{\<expr2\>}）の結果を変数0（\codem{\<variable0\>}）に束縛する」ことを示しています。

        さらに、以下のように内部で複数の局所変数も定義可能です。

        \d-code(```
          let <variable0> =
            let <variable1> = <expr1> in
            let <variable2> = <expr2> in
            <expr3>
        ```);%

        これは、変数0（\codem{\<variable0\>}）の内部で、
        局所変数1（\codem{\<variable1\>}）に加えて局所変数2（\codem{\<variable2\>}）を定義し、
        \codem{\<expr3\>}で利用することを示します。
        このことを利用すると、
        \codem{\<variable0\>}の内部で任意の局所変数を持つことが可能であることを分かります。

        \d-code(```
          let <variable0> =
            let <variable1> = <expr1> in
            let <variable2> = <expr2> in
            ...
            let <variable_n> = <expr_n> in
            <expr3>
        ```);%
      }
      +p{
        さて、ここまで準備できた所で、局所変数の上書きを試みてみます。

        \d-code(```
          utop # let a = 
            let pi = 3.14 in
            let b = pi *. 2. in
            let pi = 0. in
            b ;;
          Line 4, characters 5-7:
          Warning 26 [unused-var]: unused variable pi.
          val a : float = 6.28
        ```);%

        上記の例は、変数\codem{pi}を\codem{3.14}に束縛した後で、変数\codem{pi}を\codem{0}で上書きしているため、
        計算過程は\codem{0.0 \*. 2.0}となるため、結果が\codem{0.0}であるかのように思われるかも知れません。
        しかし結果は\codem{6.28}となっており、その計算過程は\codem{3.14 \*. 2.0}であることが分かります。
        つまり、最初に定義した変数\codem{pi}を後述の\codem{let pi = 0.}で上書きしているわけではなく、
        変数\codem{pi}という新しい変数が定義されます。
        また、\codem{let pi = 0.}で定義する前に変数\codem{b}にて利用（\codem{let b = pi \*. 2.}）する際は、
        利用する以前の定義（つまり\codem{let pi = 3.14}）を参照します。
        最後に、警告\codem{Warning 26 [unused-var]: unused variable pi.}では「変数\codem{pi}が未使用である」ことが示されており、
        このことからも最初に定義した変数\codem{pi}と最後に定義した\codem{pi}は異なる変数であることが分かります。
      }>
    >
    +section?:(`Function`){関数}<
      +p{
        \dfn{関数}とは、任意の\dfn{引数}を受け取り、式を評価するための識別子です。
        引数とは、関数に渡すパラメータのことで、数学の関数\codem{f(x)}で言えば、\codem{x}に該当します。
        関数を定義するには以下の構文を利用します。

        \d-code(```
          let <function> <arguments...> = <expr>
        ```);%w

        上記の構文を見てお気付きかと思いますが、OCamlでは関数も変数と同じようにキーワード\codem{let}で定義できます。
        \codem{\<function\>}は関数名を表し、\codem{\<arguments...\>}は引数を表します。
        3つのドット（\codem{...}）は「後ろに2番目の引数、3番目の引数...のように0個以上の引数を取って良い」ことを示します。
        \codem{\<expr\>}は、（変数で利用した構文同様に）式を表します。

        また、OCamlの関数名は変数名と同様に、小文字またはアンダースコア（\codem{_}）で始まる必要があります。
        2文字目以降は、大文字、小文字、数字、アンダースコア（\codem{_}）などを自由に利用できます。

        次に、関数定義の最もシンプルな例を示します。

        \d-code(```
          utop # let add_one x = x + 1 ;;
          val add_one : int -> int = <fun>

          utop # add_one 10 ;;
          - : int = 11
        ```);%

        上記の例では、インタプリタが\codem{add_one}という名前の関数を新たに定義しています。
        関数\codem{add_one}は引数\codem{x}を受け取り、xに+1した結果を返します。

        関数定義後のインタプリタの出力は
        「\codem{add_one}という\codem{int -\> int}型の関数を定義し、その値は関数である」ことを示しています。
        関数の型は\codem{A -\> B}のように表現し、「型Aの引数を受け取ったら型Bの値を返す、関数の型」を表します。

        試しに\codem{add_one 10}を入力すると、その結果は\codem{11}となり、与えた引数に\codem{+1}されていることが分かります。

        ここで、\codem{関数の型}と\codem{関数が返す型}を混同しないように注意して下さい。
        上記の例で言えば、\codem{add_one 10}が\codem{11}を返しているため、
        ついつい関数\codem{add_one}の型はint型だと考えてしまうかもしれませんが、
        \codem{11}というのは関数が返した結果の値の型なのです。
        関数\codem{add_one}自体は、int型の引数を1つだけ取りその結果としてint型を返す、すなわち\codem{int -\> int}型となります。
      }
      +frame<
        +subsection{コラム； 型推論と型チェック}<
          +p{
            先程の関数\codem{add_one}を定義した際に、引数\codem{x}の型を指定しませんでした。
            にも関わらず、\codem{x}の型はintであるという結果が得られました。
            これは、関数の式にて\codem{x + 1}とある通り、整数の演算に用いられる\codem{+}が存在するため、\codem{x}の型はint型でなければいけません。

            試しにxに整数以外（例えば実装）を渡すとエラーになります。

            \d-code(```
              utop # add_one 1.0 ;;
              Line 1, characters 8-11:
              Error: This expression has type float but an expression was expected of type
            ```);%

            インタプリタは\codem{let add_one x = x + 1}という関数定義からその関数が必要とする引数の型と関数が返す型\codem{val add_one : int -\> int = \<fun\>}を推論してくれました。
            このように型を明示せずとも、関数の内容といった周辺情報及び文脈から引数の型や関数などが返す型を自動的（暗黙的）に推測してくれる機能のことを\dfn{型推論}といいます。
            型推論のメリットは、私達が明示的に型を指定する必要がないことです。
            
            また、上記の例のように、引数として与えられた値が、関数の型と一致しているか（上記の例で言えば、\codem{add_one}の引数がint型であるか）をチェックすることを\dfn{型チェック}といいます。
            型チェックのメリットは、誤った型が渡され実行されるのを未然に防げることです。
            プログラムを書き終わって動かしている最中に間違いに気づくよりも、より早い段階で気づけた方が間違いを修正するためのコストが低く、ソフトウェア全体の信頼性向上につながります。
          }
        >
      >
      +subsection?:(`Multiargument functions`){複数の引数を持つ関数}<+p{
        \ref-section(`Function`);で示した通り、関数は1つ以上の引数を取ることができます。
        例えば、以下のような\dfn{第一引数}\footnote{
          引数を与える順番に応じて、第一引数、第二引数、...、第N引数という呼び方をします。
        }
        と第二引数の差を返す関数を考えます。

        \d-code(```
          utop # let diff x y = x - y ;;
          val diff : int -> int -> int = <fun>
        ```);%

        インタプリタの出力にある\codem{int -\> int -\> int}がこの関数の型になります。
        この関数の型は右結合で解釈するため、\codem{(int -\> int) -\> int}ではなく、\codem{int -\> (int -\> int)}です。
        この意味は「第一引数としてint型を受け取り、第二引数としてint型を受け取り結果としてint型を返す関数の型」となります。

        これを、もう少し自然に解釈しようとすると「2つのint型な引数をとり、int型の結果を返す関数」になります。

        最後に、\codem{\<fun\>}について説明します。
        \codem{\<fun\>}は定義されたものが関数であることを示します。
        整数や実数を定義した際は、その具体的な値が示されましたが、関数の場合はその内部まで示されることはありません。
      }>
      +subsection{匿名関数（無名関数）}<+p{
        \dfn{匿名関数（無名関数）}とは、関数名を持たない関数です。
        つまり、変数や前述の関数と違って、後から変数名や関数名を指定して再利用することができない、ということです。
        しかしながら、関数名をつけるまでもない（例えば1度しか利用しない）関数の方が便利な場合もあるため、本節で説明します。
        匿名関数を作るには以下の構文を利用します。

        \d-code(```
          fun <arguments...> -> <expr>
        ```);%

        これで、1つ以上の引数\codem{\<arguments...\>}を受け取って、式\codem{\<expr\>}を実行しその結果を返す、という関数を表します。
        匿名関数を利用した例を以下に示します。

        \d-code(```
          utop # fun x -> x + 1 ;;
          - : int -> int = <fun>

          utop # (fun x -> x + 1) 10 ;;
          - : int = 11
        ```);%
        
        匿名関数定義後のインタプリタの出力は「直前(\codem{-})に入力した結果の型は\codem{int -\> int}型で、その値は関数である」ことを示しています。
        匿名関数は特定の関数名にバインドされないため、匿名関数の後ろに\dfn{実引数}\footnote{
          実引数とは、関数を利用する際に実際に渡される引数のことです。
          一方で、関数定義の際に記述する引数（例えば\codem{fun x -\> x + 1}の\codem{x}に当たる部分）は\dfn{仮引数}と呼びます。
        }を渡して利用します。
        上記の例にもある通り、匿名関数に10を渡した場合\codem{(fun x -\> x + 1) 10}の結果、確かに\codem{+1}されて値が返ってきたことが分かります。
      }
      +p{
        次の例は少し発展的ですが、関数の引数に関数を渡すことも可能です。

        \d-code(```
          utop # let add_note_header x = "Note: " ^ x ;;
          val add_note_header : string -> string = <fun>

          utop # (fun g -> g "Hello world.") add_note_header ;;
          - : string = "Note: Hello world."
        ```);%

        上記の例では、まず\codem{add_note_header}という関数を定義しています。
        この関数は引数に文字列を取り、その文字列の先頭に\codem{`Note: `#}という文字列を結合して返します。
        次に\codem{(fun g -\> g "Hello world.")}について説明します。
        \codem{(fun g -\> g "Hello world.")}は関数\codem{g}を引数として取り、その関数\codem{g}を"Hello world."に適用した結果を返す関数になります。
        その結果、\codem{Note: Hello world.}という文字列を返しています。

        OCamlの重要なポイントの1つとして、関数も通常の値として扱われることがあげられます。
        つまり通常の値と同様に、ある関数に別の関数を引数として渡したり、ある関数から異なる関数を返すなど、が可能です。
        また、\dfn{letバインディング}\footnote{
          \codem{let}を用いたバインディングを指します。
          なお、変数におけるバインディングもletバインディングですが、変数の場合は特に変数バインディングと呼びました。
        }
        を用いて、匿名関数に関数名をつけることもできます。

        \d-code(```
          utop # let add_one = (fun x -> x + 1) ;;
          val add_one : int -> int = <fun>
        ```);%

        上記の例にて、匿名関数\codem{(fun x -\> x + 1)}に対して変数名\codem{add_one}をつけることができました。
        \codem{add_one}という変数の値を匿名関数\codem{(fun x -\> x + 1)}で定義したことになります。
      }
      +p{
        また\codem{add_one}は関数定義の構文に従って、以下のように定義するのと同等です。

        \d-code(```
          utop # let add_one x = x + 1 ;;
          val add_one : int -> int = <fun>
        ```);%

        つまり、名前付き関数を定義する以下の構文

        \d-code(```
          let <function> <arguments...> = <expr>
        ```);%

        と、無名関数を用いて変数を定義する構文

        \d-code(```
          let <variable> <arguments...> = <expr>
        ```);%

        は、同等であり、名前付き関数を定義する構文は後者の\dfn{糖衣構文}\footnote{
          読みやすさ・書きやすさのための導入される書き方をいいます。
          複雑で分かりにくい構文を全く同じ意味となるように、シンプルで分かりやすい書き方で書けるようにしたもののことです。
        }となります。
      }>
      +subsection?:(`Currying`){カリー化}<+p{
        \ref-subsection(`Multiargument functions`);で紹介した関数\codem{diff}を思い出しましょう。
        関数\codem{diff}は以下のように定義していました。

        \d-code(```
          utop # let diff x y = x - y ;;
          val diff : int -> int -> int = <fun>
        ```);%

        これを匿名関数を利用して次のように書き直してみます。

        \d-code(```
          utop # let diff =  (fun x -> (fun y -> x - y)) ;;
          val diff : int -> int -> int = <fun>
        ```);%

        \ref-subsection(`Multiargument functions`);でも説明した通り、関数\codem{diff}の型は\codem{int -\> (int -\> int)}でした。
        ここで、匿名関数を利用し書き直した定義を見てみます。
        \codem{let diff =  (fun x -\> (fun y -\> x - y))}は、int型の引数を1つ受け取る関数\codem{(fun x -\> (...))}であり、
        その関数は別の関数\codem{(fun y -\> x - y)}を返す関数であることが分かります。
        このことから、両者の意味するところが似ている（同じ）であることが読み取れます。

        この関数\codem{diff}は内部的にネストしており、\codem{x - y}は「1つ外側の関数でバインドされた値\codem{x}」と「同関数内でバインドされた\codem{y}」を参照しています。

        このように、複数の引数を取る関数を、「元の関数（この例では\codem{diff}）の最初の引数（この例では\codem{x}）だけを取り」且つ「元の関数の残りの引数（この例では\codem{y}）を取り結果を返す関数」となるような関数への変換あるいはその関数を\dfn{カリー化}と言います。
      }
      +p{
        カリー化を利用すると関数\codem{diff}から次のような関数を生成できます。

        \d-code(```
          utop # let diff_from_ten y = diff 10 y ;;
          val diff_from_ten : int -> int = <fun>

          utop # diff_from_ten 5 ;;
          - : int = 5
        ```);%

        上記の例では、関数\codem{diff_from_ten}を定義し、この関数は10と与えられた引数\codem{y}との差を返します。
        このように、カリー化された関数（この例では\codem{diff}）に引数の一部を適用して新しい関数（この例では\codem{diff_from_ten}）を取得することができ、これを\dfn{部分適用}と言います。

        また、匿名関数で利用した\codem{fun}キーワードはカリー化のための独自の構文をサポートしており、複数の引数を取ることができます。
        その結果、前述の関数\codem{diff}は次のように書き直すこともできます。

        \d-code(```
          utop # let diff = (fun x y -> x - y) ;;
          val diff : int -> int -> int = <fun>
        ```);%
      }
      >
      +subsection?:(`Recursive functions`){再帰関数}<+p{
        \dfn{再帰関数}とは、関数内で自分自身の呼び出しが含まれている関数です。
        自分自身の呼び出しを\dfn{再帰呼び出し}といいます。
        再帰関数を定義するには以下の構文を利用します。

        \d-code(```
          let rec <function> <arguments...> = <expr>
        ```);%

        上記の構文は名前付きの関数とほとんど同じで、
        唯一違う点は\codem{let}キーワードの後に\codem{rec}キーワードが追加されていることです。
        この\codem{rec}キーワードを付与することで、この関数が再帰関数であることを示します。

        再帰関数を利用する場合、単純に自分自身を呼び出してしまうと無限ループに陥ってしまうため、
        後述する\dfn{条件分岐}や\dfn{パターンマッチ}を用いる必要があります。
        そのため、本節では構文の紹介に留め、条件分岐やパターンマッチの節で改めて解説します。
      }>
    >
    +section?:(`Practice of function`){実践}<
      +p{
       これまでに紹介したデータ、変数、関数を用いてプログラムを作成してみましょう。
      }
      +subsection{関数としての演算子}<+p{
        \ref-chapter(`Basic data and types`);で、各データ及び型に対する演算子をいくつか紹介しました。
        これまで見てきた例では、演算子は次のように値と値の間に置いていました\footnote{
          これを\dfn{中置演算子}といいます。
        }。

        \d-code(```
          utop # 2 + 3 ;;
          - : int = 5        
        ```);%

        OCamlでは、中置演算子をカッコ\codem{(...)}で囲むことで関数として扱うことができます\footnote{
          中置演算子と関数の違いは構文的な違いしかないのです。
        }。
        そのため、以下のように記述することができます。

        \d-code(```
          utop # (+) 2 3 ;;
          - : int = 5
        ```);%
        
        関数が次の文字で定義される場合、その関数は演算子として扱うことができます\footnote{
          ただし、先頭の文字が\codem{\$}、\codem{!}、\codem{~}ではないことが条件です。
        }。

        \listing{
          * \codem{+}
          * \codem{-}
          * \codem{\*}
          * \codem{/}
          * \codem{=}
          * \codem{\<}
          * \codem{\>}
          * \codem{\$}
          * \codem{\%}
          * \codem{.}
          * \codem{:}
          * \codem{?}
          * \codem{\@}
          * \codem{^}
          * \codem{!}
          * \codem{~}
        }%

        一方で、\codem{mod}などの上記に含まれない文字で構成される、事前定義された中置演算子も存在します。
        具体的な例として、与えられた2つの数を2倍してから可算する\codem{++}という演算子を作成してみます。

        \d-code(```
          utop # let (++) x y = (x * 2) + (y * 2) ;;
          val ( ++ ) : int -> int -> int = <fun>

          utop # 3 ++ 4 ;;
          - : int = 14
        ```);%

        演算子を定義するには関数名を\codem{(...)}で囲む必要があります。
        この演算子は\codem{(3 \* 2) + (4 \* 2) = 14}となっており、確かに想定通りに動作しています。
      }
      +p{
        ただし、アスタリスク（\codem{\*}）だけは注意して下さい。
        例えば、\codem{\*}を利用して独自の中置演算子を定義しようとして、以下のように記述するとエラーとなってしまいます。

        \d-code(```
          utop # let (***) x y = (x ** y) ** y;;
          Line 1, characters 17-18:
          Error: Unbound value x
          Hint: If this is a recursive definition,
          you should add the 'rec' keyword on line 1
        ```);%

        エラーには「xがバインドされていない」旨が示されていますが、引数で与えた\codem{x}はきちんと利用しています。
        これはインタプリタが定義をうまく読み取れていないことになります。
        その原因は、OCamlのコメントが\codem{(\*...\*)}で表現されるためです。
        つまり、上記のかかき書き方の場合、\codem{(\*\*\*)}がコメントとして解釈され、
        インタプリタが次のように解釈したのです。

        \d-code(```
          utop # let x y = (x ** y) ** y;;
          Line 1, characters 17-18:
          Error: Unbound value x
          Hint: If this is a recursive definition,
          you should add the 'rec' keyword on line 1
        ```);%

        上記の定義を見ると、丁度再帰関数のような定義に見えますが、再帰を表す\codem{rec}がないため、
        インタプリタは\codem{rec}を付けるように指示しているわけです。
        これを回避するためには、カッコ（\codem{(}及び\codem{)}）とアスタリスク（\codem{\*}）の間にスペースを挿入する必要があります。
        以下のように定義すると意図した通りに\codem{\*\*\*}を定義できます。

        \d-code(```
          utop # let ( *** ) x y = (x ** y) ** y;;
          val ( *** ) : float -> float -> float = <fun>
        ```);%
      }
      +p{
        次に少し実用的な中置演算子を定義してみます。
        これはいくつかのサードパーティライブラリで提供されている場合がありますが、次のように容易に実装可能です。

        \d-code(```
          utop # let (|>) x f = f x ;;
          val ( |> ) : 'a -> ('a -> 'b) -> 'b = <fun>
        ```);%

        この例では、中置演算子\codem{\|\>}を定義しており、
        「多相型の引数\codem{x}」と「多相型の引数を1つとって多相型を返す関数\codem{f}」を受け取って、
        「\codem{f x}（つまり関数\codem{f}に引数\codem{x}を適用した結果）を返す」関数になります。

        これは、

        \d-code(```
          utop # f x ;;
        ```);%

        と書いていたものを、

        \d-code(```
          utop # x |> f ;;
        ```);%

        と書けるようにしたに過ぎません。
        この中置演算子は、一見なんの意味もないように見えます。
        しかし\codem{\|\>}は、シェルでいうところの\dfn{パイプ}と似た機能になります。

        例えば、これまで見てきた関数の適用だけを利用すると、

        \d-codem{
          (\metasub(${n}){f} (\metasub(${n - 1}){f} (\metasub(${n - 2}){f} (... (\meta{f} \meta{x})))))
        }%

        のように書かなければならず、慣れていないと読みづらさを感じるかも知れませんが、
        \codem{\|\>}を利用すると、丁度シェルで結果をパイプで渡していくような感覚で、

        \d-codem{
          \meta{x} `|>` \meta{f} \|\> ... `|>` \metasub(${n - 2}){f} `|>` \metasub(${n - 1}){f} `|>` \metasub(${n}){f}
        }%

        のように書くことができます。

      }>
      +subsection{ラベル付き引数}<
        +p{
          これまで定義してきた関数は、引数の位置（順番）によって意味を持たせていました。
          OCamlは、\dfn{ラベル付き引数}という機構を利用して引数に名前を付け、位置に依存しない関数定義が可能です。
          例えば、除算の商を出力する関数\codem{my_mod}を自作するとします。

          \d-code(```
            utop # let my_mod ~divisor ~dividend = dividend /. divisor ;;
            val my_mod : divisor:float -> dividend:float -> float = <fun>

            utop # my_mod 10. 1. ;;
            - : float = 0.1
          ```);%

          上記の関数は、割る数\codem{~divisor}と割られる数\codem{~dividend}というラベルがついた引数を持ちます。
          ラベル付き引数は仮引数名の先頭にチルダ\codem{~}を付けることで、それがラベル付き引数であることを示します。

          ラベル付き引数を利用するには、ラベルと実引数をコロン（\codem{:}）で繋いで渡します。
          ラベル付き引数は位置に依存しないため、引数の順序を入れ替えても同様の結果を得ることができます。

          \d-code(```
            utop # my_mod ~divisor:10. ~dividend:1. ;;
            - : float = 0.1

            utop # my_mod ~dividend:1. ~divisor:10. ;;
            - : float = 0.1
          ```);%

          下記のようにこれまで通り引数の位置に応じて意味を持たせることもできます。

          \d-code(```
            utop # my_mod 10. 1. ;;
            - : float = 0.1
          ```);%

          OCamlでは\dfn{ラベルパニング}と呼ばれる機構をサポートしており、これはラベルとその値として渡される変数の名前が一致している場合、
          引数にラベルを記述するだけでそのラベル名と名称が一致する変数を参照してくれるものです。
          この例を下記に示します。

          \d-code(```
            utop # let divisor = 10. in
              let dividend = 1. in
              my_mod ~divisor ~dividend ;;
            - : float = 0.1
          ```);%

          ラベル付き引数は、次のケースで特に有用です。

          \listing{
            * 引数の位置（順序）に依存させたくない場合
            * 引数の型からその意味が推測できない場合
            * 同じ型の引数が複数あり、どの引数にどの意味が紐づくか混乱する場合
            * 引数の数が多すぎる場合
          }
        }
      >
      +subsection{オプション型とオプショナル引数}<
        +p{
          これまでは関数の引数は1つも欠かすことができませんでした。
          関数定義で定義した仮引数の数と、関数呼び出しで利用する実引数の数が一致している必要がありました。
          一方、本節で説明する\dfn{オプショナル引数}を利用することで、これを省略することができます。
        }
        +p{        
          オプショナル引数を説明する前に\dfn{オプション型}を説明します。
          なぜならオプショナル引数を利用するにはオプション型が必要だからです。

          OCamlにおけるオプション型は次のように定義されています。

          \d-code(```
            type 'a option = None
                           | Some of 'a
          ```);%

          \codem{None}は値がないことを示すコンストラクタであり、\codem{Some}は多相型\codem{'a}の値が存在することを示すコンストラクタです。
          つまり\codem{'a option}型は「値を持たないか、または'a型の値を持つ」ことを示します。
        }
        +p{
          コメント用文字列を生成する関数\codem{add_comment}を用いて、オプショナル引数がどのようなものか見ていきましょう。

          \d-code(```
            utop # let add_comment ?comment_header x =
              let comment_header = match comment_header with
                | None -> "#"
                | Some x -> x
              in
              comment_header ^ " " ^ x ;;
            val add_comment : ?comment_header:string -> string -> string = <fun>
          ```);%

          上記関数は、オプショナル引数を表すクエスチョンマーク（\codem{?}）を用いて、第一引数の\codem{comment_header}がオプショナル引数であることを示しています。
          関数呼び出しの際に、チルダ（\codem{~}）とコロン（\codem{:}）及びそれに続けて変数の値を記述することでオプショナル引数に値を渡すことができます。
          関数呼び出しの例を下記に示します。

          \d-code(```
            utop # add_comment ~comment_header:"%" "comment body" ;;
            - : string = "% comment body"
          ```);%

          上記の例を見ると、オプショナル引数の呼び出し方はラベル付き引数の呼び出し方と全く同じことが分かりますね。
          また、オプショナル引数を省略した場合、関数定義の\codem{match comment_header with}の\codem{None -\> "\#"}が適用されます。

          \d-code(```
            utop # add_comment "comment body" ;;
            - : string = "# comment body"
          ```);%

          オプショナル引数のメリットとして、呼び出し側が意識する必要のないまたはその必要性が薄い引数を無視できることがあげられます。
          一方デメリットとして、オプショナル引数を明示的に指定しない場合、オプショナル引数の値は関数内部で暗黙的に補完され処理されるため、
          意図しない動作を選択してしまう可能性があげられます。

          そのため、ユーザから見える関数でのみオプショナル引数を利用し、ユーザから見えないような裏側で利用する関数はオプショナル引数の利用を避けたほうが良いでしょう。
        }
      >
    >
>